<snippet>
	<content><![CDATA[
/**
 * ${1:Element Name} element
 *
 * // @echo HEADER
 */

function auxin_get_${2:sample_element}_master_array( $master_array ) {


    \$master_array['aux_${2:sample_element}'] = array(
        'name'                          => __('[Phlox] ${4:Sample Element Name}', PLUGIN_DOMAIN ),
        'auxin_output_callback'         => 'auxin_widget_${2:sample_element}_callback',
        'base'                          => 'aux_${2:sample_element}',
        'description'                   => __('${5:Sample element description}', PLUGIN_DOMAIN ),
        'class'                         => 'aux-widget-${3:sample-element}',
        'show_settings_on_create'       => ${6:true},
        'weight'                        => 1,
        'is_widget'                     => ${7:true},
        'is_shortcode'                  => ${8:true},
        'is_so'                         => ${9:true},
        'is_vc'                         => ${10:true},
        'category'                      => THEME_NAME,
        'group'                         => '',
        'admin_enqueue_js'              => '',
        'admin_enqueue_css'             => '',
        'front_enqueue_js'              => '',
        'front_enqueue_css'             => '',
        'icon'                          => 'auxin-element auxin-${11:icon-name}',
        'custom_markup'                 => '',
        'js_view'                       => '',
        'html_template'                 => '',
        'deprecated'                    => '',
        'content_element'               => '',
        'as_parent'                     => '',
        'as_child'                      => '',
        'params' => array(
            array(
                'heading'          => __('Title',PLUGIN_DOMAIN ),
                'description'      => __('Recent post title, leave it empty if you don`t need title.', PLUGIN_DOMAIN),
                'param_name'       => 'title',
                'type'             => 'textfield',
                'value'            => '',
                'holder'           => 'textfield',
                'class'            => 'title',
                'admin_label'      => false,
                'dependency'       => '',
                'weight'           => '',
                'group'            => '',
                'edit_field_class' => ''
            ),
            array(
                'heading'           => __('Display post info',PLUGIN_DOMAIN ),
                'description'       => '',
                'param_name'        => 'show_info',
                'type'              => 'aux_switch',
                'value'             => '1',
                'class'             => '',
                'admin_label'       => false,
                'weight'            => '',
                'group'             => '',
                'edit_field_class'  => ''
            ),
            array(
                'heading'           => __('Post info position', PLUGIN_DOMAIN ),
                'description'       => '',
                'param_name'        => 'post_info_position',
                'type'              => 'dropdown',
                'def_value'         => 'after-title',
                'holder'            => '',
                'class'             => 'post_info_position',
                'value'             => array (
                    'after-title'   => __('After Title' , PLUGIN_DOMAIN ),
                    'before-title'  => __('Before Title', PLUGIN_DOMAIN )
                ),
                'admin_label'       => false,
                'dependency'        => array(
                    'element'       => 'show_info',
                    'value'         => '1'
                ),
                'weight'            => '',
                'group'             => '',
                'edit_field_class'  => ''
            )
        )
    );

    return \$master_array;
}

add_filter( 'auxin_master_array_shortcodes', 'auxin_get_${2:sample_element}_master_array', 10, 1 );




/**
 * ${12:Element WITH loop and column}
 *
 * The front-end output of this element is returned by the following function
 *
 * @param  array  \$atts              The array containing the parsed values from shortcode, it should be same as defined params above.
 * @param  string \$shortcode_content The shorcode content
 * @return string                     The output of element markup
 */
function auxin_widget_${2:sample_element}_callback( \$atts, \$shortcode_content = null ){

    // Defining default attributes
    $default_atts = array(
        'title'                       => '',    // header title

        'universal_id'                => '',
        'use_wp_query'                => false, // true to use the global wp_query, false to use internal custom query
        'reset_query'                 => true,
        'wp_query_args'               => array(), // additional wp_query args
        'custom_wp_query'             => '',

        'loadmore_type'               => 'scroll', // 'more-button', 'scroll', 'next-prev' (optional)

        'extra_classes'               => '', // custom css class names for this element (optional)
        'custom_el_id'                => '', // custom id attribute for this element (optional)
        'base'                        => 'aux_${2:sample_element}',
        'base_class'                  => 'aux-widget-${3:sample-element}'
    );

    \$result = auxin_get_widget_scafold( \$atts, \$default_atts, \$shortcode_content );
    extract( \$result['parsed_atts'] );

    // query --------------------------------------

    ob_start();


    if( \$custom_wp_query ){
        \$wp_query = \$custom_wp_query;

    } elseif( ! \$use_wp_query ){

        // create wp_query args
        \$args = array(
            'post_type'             => 'page',
            'orderby'               => "menu_order date",
            'order'                 => "DESC",
            'post_status'           => 'publish',
            'posts_per_page'        => -1,
            'ignore_sticky_posts'   => 1
        );

        // add the additional query args if available
        if( \$wp_query_args ){
            \$args = wp_parse_args( \$wp_query_args, \$args );
        }

        // pass the args through the auxin query parser
        \$wp_query = new WP_Query( auxin_parse_query_args( \$args ) );

    } else {
        global \$wp_query;
    }

    // widget header ------------------------------
    echo \$result['widget_header'];
    echo \$result['widget_title'];

    // widget custom output -----------------------

    // If this function was called by ajax handler, dont generate the wrappers
    // "aux-ajax-view" is a identifier for ajax script to append the markup to
    echo ! \$skip_wrappers ? '<div class="aux-col-wrapper aux-ajax-view aux-col3">' : '';


    \$have_posts = \$wp_query->have_posts();

    if( \$have_posts ): while ( \$wp_query->have_posts() ) : \$wp_query->the_post();
        \$post = get_post();

        // loop here

    endwhile; endif;

    if( \$reset_query ){
        wp_reset_postdata();
    }

    // return false if no result found
    if( ! \$have_posts ){
        ob_get_clean();
        return false;
    }

    // If this function was called by ajax handler, dont generate the wrappers
    echo ! \$skip_wrappers ? '</div>' : '';

    // load more controllers ---------------------
    if( ! \$skip_wrappers ) {
        echo auxin_get_load_more_controllers( $loadmore_type );
    }

    // widget footer ------------------------------
    echo \$result['widget_footer'];

    return ob_get_clean();
}



/**
 * ${13:Element WITHOUT loop and column}
 *
 * The front-end output of this element is returned by the following function
 *
 * @param  array  \$atts              The array containing the parsed values from shortcode, it should be same as defined params above.
 * @param  string \$shortcode_content The shorcode content
 * @return string                     The output of element markup
 */
function auxin_widget_${2:sample_element}_callback( \$atts, \$shortcode_content = null ){

    // Defining default attributes
    $default_atts = array(
        'title'                       => '', // header title

        'extra_classes'               => '', // custom css class names for this element (optional)
        'custom_el_id'                => '', // custom id attribute for this element (optional)
        'loadmore_type'               => '', // 'next' (more button), 'scroll', 'next-prev' (optional)
        'loadmore_per_page'           => '', // number of posts to be passed on ajax call (optional. default is 12)

        'base'                        => 'aux_${2:sample_element}',
        'base_class'                  => 'aux-widget-${3:sample-element}'
    );

    \$result = auxin_get_widget_scafold( \$atts, \$default_atts, \$shortcode_content );
    extract( \$result['parsed_atts'] );

    ob_start();

    // widget header ------------------------------
    echo \$result['widget_header'];
    echo \$result['widget_title'];

    // widget custom output -----------------------



    // widget footer ------------------------------
    echo \$result['widget_footer'];

    return ob_get_clean();
}
]]></content>
	<tabTrigger>auxin-element</tabTrigger>
	<description>Add new auxin element/widget</description>
	<scope>source.php</scope>
</snippet>
